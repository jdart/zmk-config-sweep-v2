/*
* Copyright (c) 2020 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

&lt { quick_tap_ms = <100>; };

/ {
        combos {
                compatible = "zmk,combos";

                // modifiers
                c_lalt {
                        timeout-ms = <50>;
                        key-positions = <20 21>;
                        bindings = <&sk LALT>;
                };
                c_lgui {
                        timeout-ms = <50>;
                        key-positions = <21 22>;
                        bindings = <&sk LGUI>;
                };
                c_laltgui {
                        timeout-ms = <50>;
                        key-positions = <20 21 22>;
                        bindings = <&sk LA(LGUI)>;
                };
                c_laltshift {
                        timeout-ms = <50>;
                        key-positions = <20 21 23>;
                        bindings = <&sk LA(LSHFT)>;
                };
                c_lctrl {
                        timeout-ms = <50>;
                        key-positions = <22 23>;
                        bindings = <&sk LCTRL>;
                };
                c_ralt {
                        timeout-ms = <50>;
                        key-positions = <28 29>;
                        bindings = <&sk LALT>;
                };
                c_rgui {
                        timeout-ms = <50>;
                        key-positions = <27 28>;
                        bindings = <&sk LGUI>;
                };
                c_raltgui {
                        timeout-ms = <50>;
                        key-positions = <27 28 29>;
                        bindings = <&sk LA(LGUI)>;
                };
                c_raltshift {
                        timeout-ms = <50>;
                        key-positions = <26 28 29>;
                        bindings = <&sk LA(LSHFT)>;
                };
                c_rctrl {
                        timeout-ms = <50>;
                        key-positions = <26 27>;
                        bindings = <&sk LCTRL>;
                };
                c_lmgui {
                        timeout-ms = <50>;
                        key-positions = <11 12>;
                        bindings = <&kp LGUI>;
                };
                // c_lmsft {
                //         timeout-ms = <50>;
                //         key-positions = <11 13>;
                //         bindings = <&kp LSFT>;
                // };
                c_lmalt {
                        timeout-ms = <50>;
                        key-positions = <10 11>;
                        bindings = <&kp LALT>;
                };
                c_lmaltsft {
                        timeout-ms = <50>;
                        key-positions = <10 11 13>;
                        bindings = <&kp LA(LSHFT)>;
                };
                c_lmguisft {
                        timeout-ms = <50>;
                        key-positions = <11 12 13>;
                        bindings = <&kp LS(LGUI)>;
                };
                c_rmgui {
                        timeout-ms = <50>;
                        key-positions = <17 18>;
                        bindings = <&kp LGUI>;
                };
                c_rmalt {
                        timeout-ms = <50>;
                        key-positions = <18 19>;
                        bindings = <&kp LALT>;
                };
                c_rmaltsft {
                        timeout-ms = <50>;
                        key-positions = <16 18 19>;
                        bindings = <&kp LA(LSHFT)>;
                };
                // c_rmsft {
                //         timeout-ms = <50>;
                //         key-positions = <16 18>;
                //         bindings = <&kp LSFT>;
                // };
                c_rmguisft {
                        timeout-ms = <50>;
                        key-positions = <16 17 18>;
                        bindings = <&kp LS(LGUI)>;
                };
                // symbols
                c_LBRC {
                        timeout-ms = <50>;
                        key-positions = <17 27>;
                        bindings = <&kp LBRC>;
                };
                c_RBRC {
                        timeout-ms = <50>;
                        key-positions = <7 17>;
                        bindings = <&kp RBRC>;
                };
                c_LPAR {
                        timeout-ms = <50>;
                        key-positions = <18 28>;
                        bindings = <&kp LPAR>;
                };
                c_RPAR {
                        timeout-ms = <50>;
                        key-positions = <8 18>;
                        bindings = <&kp RPAR>;
                };
                c_LBKT {
                        timeout-ms = <50>;
                        key-positions = <16 26>;
                        bindings = <&kp LBKT>;
                };
                c_RBKT {
                        timeout-ms = <50>;
                        key-positions = <6 16>;
                        bindings = <&kp RBKT>;
                };
                // common shortcuts
                c_AGL {
                        timeout-ms = <50>;
                        key-positions = <1 11>;
                        bindings = <&kp LA(LG(LARW))>;
                };
                c_AGR {
                        timeout-ms = <50>;
                        key-positions = <2 12>;
                        bindings = <&kp LA(LG(RARW))>;
                };
                c_GBL {
                        timeout-ms = <50>;
                        key-positions = <11 21>;
                        bindings = <&kp LG(LBKT)>;
                };
                c_GBR {
                        timeout-ms = <50>;
                        key-positions = <12 22>;
                        bindings = <&kp LG(RBKT)>;
                };
                c_ASU {
                        timeout-ms = <50>;
                        key-positions = <3 13>;
                        bindings = <&kp LA(LS(DARW))>;
                };
                c_ASD {
                        timeout-ms = <50>;
                        key-positions = <13 23>;
                        bindings = <&kp LA(LS(UARW))>;
                };
                // misc
                c_esc {
                        timeout-ms = <50>;
                        key-positions = <12 17>;
                        bindings = <&kp ESCAPE>;
                };
                c_esc_2 {
                        timeout-ms = <50>;
                        key-positions = <15 25>;
                        bindings = <&kp ESCAPE>;
                };
                c_CLR {
                        timeout-ms = <50>;
                        key-positions = <1 2 4>;
                        bindings = <&bt BT_CLR>;
                };
                c_OUT {
                        timeout-ms = <50>;
                        key-positions = <5 6 8>;
                        bindings = <&out OUT_TOG>;
                };
                c_RST {
                        timeout-ms = <50>;
                        key-positions = <1 2 3>;
                        bindings = <&reset>;
                };
                c_CAPSLOCK {
                        timeout-ms = <50>;
                        key-positions = <21 22 23 24>;
                        bindings = <&kp CAPSLOCK>;
                };
                c_T {
                        timeout-ms = <50>;
                        key-positions = <2 3>;
                        bindings = <&kp T>;
                };
                c_Y {
                        timeout-ms = <50>;
                        key-positions = <6 7>;
                        bindings = <&kp Y>;
                };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
    &kp Q       &kp W        &kp E          &kp R        &kp T          &kp Y    &kp U         &kp I           &kp O       &kp P
    &kp A       &kp S        &kp D          &kp F        &kp G          &kp H    &kp J         &kp K           &kp L       &kp SEMI
    &mt LSHFT Z &kp X        &kp C          &kp V        &kp B          &kp N    &kp M         &kp COMMA       &kp DOT     &mt LSHFT FSLH
                                            &lt 1 BKSP   &kp TAB        &kp RET  &lt 1 SPACE
                        >;
                };

                raise {
                        bindings = <
    &kp DEL     &kp N7      &kp N8       &kp N9      &kp PRCNT          &kp TILDE  &kp EXCL    &kp SQT   &kp DQT     &kp AT
    &kp PLUS    &kp N4      &kp N5       &kp N6      &kp STAR           &kp LARW   &kp DARW    &kp UARW  &kp RARW    &kp CARET
    &kp N0      &kp N1      &kp N2       &kp N3      &kp HASH           &kp GRAVE  &kp AMPS    &kp PIPE  &kp UNDER   &kp BSLH
                                         &kp EQUAL   &kp DLLR           &kp GT     &kp MINUS
                        >;
                };
        };
};
